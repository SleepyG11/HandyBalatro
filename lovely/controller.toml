[manifest]
version = "1.0.0"
dump_lua = true
priority = -1

# Mouse listeners
[[patches]]
[patches.pattern]
target = "main.lua"
pattern = '''function love.mousepressed(x, y, button, touch)'''
position = "after"
payload = '''
if Handy.controller.process_mouse(button, false, touch) then return end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "main.lua"
pattern = '''function love.mousereleased(x, y, button)'''
position = "after"
payload = '''
if Handy.controller.process_mouse(button, true) then return end
'''
match_indent = true
overwrite = false

# Key listeners
[[patches]]
[patches.pattern]
target = "main.lua"
pattern = '''function love.keypressed(key)'''
position = "after"
payload = '''
if Handy.controller.process_key(key, false) then return end
'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "main.lua"
pattern = '''function love.keyreleased(key)'''
position = "after"
payload = '''
if Handy.controller.process_key(key, true) then return end
'''
match_indent = true
overwrite = false

# Handle card click
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''function Card:click()'''
position = "after"
payload = '''
if Handy.controller.process_card_click(self) then return end
'''
match_indent = true
overwrite = false

# Handle card hover
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''function Card:hover()'''
position = "after"
payload = '''
if Handy.controller.process_card_hover(self) then return end
'''
match_indent = true
overwrite = false

# Handle card stop hover
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''function Card:stop_hover()'''
position = "after"
payload = '''
if Handy.last_hovered_card == self then
    Handy.last_hovered_card = nil
    Handy.last_hovered_area = nil
end
'''
match_indent = true
overwrite = false

# Handle skip tag click
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local tag_sprite_ui = _tag:generate_UI()'''
position = "after"
payload = '''
local _handy_tag_click_target = _tag.tag_sprite
local _handy_tag_click_ref = _handy_tag_click_target.click
_handy_tag_click_target.states.click.can = true
_handy_tag_click_target.click = function(...)
    if Handy.controller.process_tag_click(_tag) then return end
    return _handy_tag_click_ref(...)
end
'''
match_indent = true
overwrite = false
